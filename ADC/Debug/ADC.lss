
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007e  0080007e  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6a  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c4  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000539  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000652  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8a:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdCommand>:
#define LCD_RW 1
#define LCD_EN 2

void lcdCommand(unsigned char cmnd)
{
	LCD_PRT = (LCD_PRT & 0x0F)|(cmnd & 0xF0);
  92:	95 b3       	in	r25, 0x15	; 21
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	95 bb       	out	0x15, r25	; 21
	LCD_PRT &= ~(1<<LCD_RS);
  9e:	95 b3       	in	r25, 0x15	; 21
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	95 bb       	out	0x15, r25	; 21
	LCD_PRT &= ~(1<<LCD_RW);
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	95 bb       	out	0x15, r25	; 21
	LCD_PRT |= (1<<LCD_EN);
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	94 60       	ori	r25, 0x04	; 4
  ae:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	9b 7f       	andi	r25, 0xFB	; 251
  b6:	95 bb       	out	0x15, r25	; 21
  b8:	36 e0       	ldi	r19, 0x06	; 6
  ba:	3a 95       	dec	r19
  bc:	f1 f7       	brne	.-4      	; 0xba <lcdCommand+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcdCommand+0x2e>

	_delay_us(20);

	LCD_PRT = (LCD_PRT & 0x0F)|(cmnd<<4);
  c0:	25 b3       	in	r18, 0x15	; 21
  c2:	30 e1       	ldi	r19, 0x10	; 16
  c4:	83 9f       	mul	r24, r19
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	92 2f       	mov	r25, r18
  cc:	9f 70       	andi	r25, 0x0F	; 15
  ce:	89 2b       	or	r24, r25
  d0:	85 bb       	out	0x15, r24	; 21
	LCD_PRT |= (1<<LCD_EN);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	85 bb       	out	0x15, r24	; 21
  e0:	08 95       	ret

000000e2 <lcdData>:

}

void lcdData(unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F)|(data & 0xF0);
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	95 bb       	out	0x15, r25	; 21
	LCD_PRT |= (1<<LCD_RS);
  ee:	95 b3       	in	r25, 0x15	; 21
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	95 bb       	out	0x15, r25	; 21
	LCD_PRT &= ~(1<<LCD_RW);
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	9d 7f       	andi	r25, 0xFD	; 253
  f8:	95 bb       	out	0x15, r25	; 21
	LCD_PRT |= (1<<LCD_EN);
  fa:	95 b3       	in	r25, 0x15	; 21
  fc:	94 60       	ori	r25, 0x04	; 4
  fe:	95 bb       	out	0x15, r25	; 21
 100:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);
 102:	95 b3       	in	r25, 0x15	; 21
 104:	9b 7f       	andi	r25, 0xFB	; 251
 106:	95 bb       	out	0x15, r25	; 21
	LCD_PRT = (LCD_PRT & 0x0F)|(data<<4);
 108:	25 b3       	in	r18, 0x15	; 21
 10a:	30 e1       	ldi	r19, 0x10	; 16
 10c:	83 9f       	mul	r24, r19
 10e:	c0 01       	movw	r24, r0
 110:	11 24       	eor	r1, r1
 112:	92 2f       	mov	r25, r18
 114:	9f 70       	andi	r25, 0x0F	; 15
 116:	89 2b       	or	r24, r25
 118:	85 bb       	out	0x15, r24	; 21
	LCD_PRT |= (1<<LCD_EN);
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	85 bb       	out	0x15, r24	; 21
 120:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 bb       	out	0x15, r24	; 21
 128:	08 95       	ret

0000012a <lcd_init>:
}

void lcd_init()
{
	LCD_DDR = 0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	84 bb       	out	0x14, r24	; 20
	LCD_PRT &= ~(1<<LCD_EN);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	85 bb       	out	0x15, r24	; 21
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x14>
 13e:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x33);
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 146:	91 e2       	ldi	r25, 0x21	; 33
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x1e>
 14c:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x32);
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 154:	81 e2       	ldi	r24, 0x21	; 33
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x2c>
 15a:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x28);
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 162:	91 e2       	ldi	r25, 0x21	; 33
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x3a>
 168:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x0E);
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 170:	81 e2       	ldi	r24, 0x21	; 33
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x48>
 176:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x01);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 17e:	83 ef       	ldi	r24, 0xF3	; 243
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x5e>
 188:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x06);
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 190:	91 e2       	ldi	r25, 0x21	; 33
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x68>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <lcd_gotoxy>:
	_delay_us(100);
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <lcd_gotoxy+0x6>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <lcd_gotoxy+0x8>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 1a6:	90 e8       	ldi	r25, 0x80	; 128
 1a8:	99 83       	std	Y+1, r25	; 0x01
 1aa:	90 ec       	ldi	r25, 0xC0	; 192
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	94 e9       	ldi	r25, 0x94	; 148
 1b0:	9b 83       	std	Y+3, r25	; 0x03
 1b2:	94 ed       	ldi	r25, 0xD4	; 212
 1b4:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstCharAdr[y-1] + x - 1);
 1b6:	e6 2f       	mov	r30, r22
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	2c 0f       	add	r18, r28
 1c2:	3d 1f       	adc	r19, r29
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	90 81       	ld	r25, Z
 1ca:	89 0f       	add	r24, r25
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 1d2:	31 e2       	ldi	r19, 0x21	; 33
 1d4:	3a 95       	dec	r19
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_gotoxy+0x3a>
 1d8:	00 00       	nop
	_delay_us(100);
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_print>:

void lcd_print(char* str)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0)
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <lcd_print+0x12>
	{
	    lcdData(str[i]);
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcdData>
		i++;
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char* str)
{
	unsigned char i = 0;
	while(str[i]!=0)
 1fa:	f8 01       	movw	r30, r16
 1fc:	ec 0f       	add	r30, r28
 1fe:	f1 1d       	adc	r31, r1
 200:	80 81       	ld	r24, Z
 202:	81 11       	cpse	r24, r1
 204:	f7 cf       	rjmp	.-18     	; 0x1f4 <lcd_print+0xc>
	{
	    lcdData(str[i]);
		i++;
	}
}
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <checkZeros>:
#include "lcdConfig.c"

uint16_t output;

void checkZeros(char* arr)
{
 20e:	ac 01       	movw	r20, r24
	for(uint8_t i=0; i<4; i++)
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	09 c0       	rjmp	.+18     	; 0x226 <checkZeros+0x18>
	{
		if(arr[i]!=0)
 214:	fa 01       	movw	r30, r20
 216:	e9 0f       	add	r30, r25
 218:	f1 1d       	adc	r31, r1
 21a:	20 81       	ld	r18, Z
 21c:	21 11       	cpse	r18, r1
 21e:	05 c0       	rjmp	.+10     	; 0x22a <checkZeros+0x1c>
			break;
		else
			arr[i] = 0x30;
 220:	20 e3       	ldi	r18, 0x30	; 48
 222:	20 83       	st	Z, r18

uint16_t output;

void checkZeros(char* arr)
{
	for(uint8_t i=0; i<4; i++)
 224:	9f 5f       	subi	r25, 0xFF	; 255
 226:	94 30       	cpi	r25, 0x04	; 4
 228:	a8 f3       	brcs	.-22     	; 0x214 <checkZeros+0x6>
 22a:	08 95       	ret

0000022c <out>:
			arr[i] = 0x30;
	}
}

void out(uint16_t output, char* arr)
{
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	8b 01       	movw	r16, r22
	uint16_t q = output;
	uint8_t rem;
	for(uint8_t i=0; i<4; i++)
 23a:	f1 2c       	mov	r15, r1
 23c:	2f c0       	rjmp	.+94     	; 0x29c <out+0x70>
	{
		if(q!=0)
 23e:	20 97       	sbiw	r28, 0x00	; 0
 240:	81 f1       	breq	.+96     	; 0x2a2 <out+0x76>
		{
			rem = q%10;
 242:	9e 01       	movw	r18, r28
 244:	ad ec       	ldi	r26, 0xCD	; 205
 246:	bc ec       	ldi	r27, 0xCC	; 204
 248:	0e 94 bc 01 	call	0x378	; 0x378 <__umulhisi3>
 24c:	ac 01       	movw	r20, r24
 24e:	56 95       	lsr	r21
 250:	47 95       	ror	r20
 252:	56 95       	lsr	r21
 254:	47 95       	ror	r20
 256:	56 95       	lsr	r21
 258:	47 95       	ror	r20
 25a:	ca 01       	movw	r24, r20
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	48 0f       	add	r20, r24
 26e:	59 1f       	adc	r21, r25
 270:	ce 01       	movw	r24, r28
 272:	84 1b       	sub	r24, r20
 274:	95 0b       	sbc	r25, r21
 276:	ac 01       	movw	r20, r24
			q /= 10;
 278:	0e 94 bc 01 	call	0x378	; 0x378 <__umulhisi3>
 27c:	ec 01       	movw	r28, r24
 27e:	d6 95       	lsr	r29
 280:	c7 95       	ror	r28
 282:	d6 95       	lsr	r29
 284:	c7 95       	ror	r28
 286:	d6 95       	lsr	r29
 288:	c7 95       	ror	r28
			arr[3-i] = 0x30 + rem;
 28a:	e3 e0       	ldi	r30, 0x03	; 3
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ef 19       	sub	r30, r15
 290:	f1 09       	sbc	r31, r1
 292:	e0 0f       	add	r30, r16
 294:	f1 1f       	adc	r31, r17
 296:	40 5d       	subi	r20, 0xD0	; 208
 298:	40 83       	st	Z, r20

void out(uint16_t output, char* arr)
{
	uint16_t q = output;
	uint8_t rem;
	for(uint8_t i=0; i<4; i++)
 29a:	f3 94       	inc	r15
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	9f 15       	cp	r25, r15
 2a0:	70 f6       	brcc	.-100    	; 0x23e <out+0x12>
			arr[3-i] = 0x30 + rem;
		}
		else
			break;
	}
	checkZeros(arr);
 2a2:	c8 01       	movw	r24, r16
 2a4:	0e 94 07 01 	call	0x20e	; 0x20e <checkZeros>
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	08 95       	ret

000002b4 <adc>:

void adc(uint8_t admux, uint8_t adps)
{
	if(adps>7)
 2b4:	68 30       	cpi	r22, 0x08	; 8
 2b6:	30 f4       	brcc	.+12     	; 0x2c4 <adc+0x10>
		return;
	else
	{
		ADCSRA = (1<<ADEN)|(1<<ADIE)|adps;		//initialize ADC , Enable ADC Interrupt and Select Frequency Prescalar
 2b8:	68 68       	ori	r22, 0x88	; 136
 2ba:	66 b9       	out	0x06, r22	; 6
		ADMUX = admux;						//select input channel, channel gain, single or differential input and Reference Voltage
 2bc:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
 2be:	86 b1       	in	r24, 0x06	; 6
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	86 b9       	out	0x06, r24	; 6
 2c4:	08 95       	ret

000002c6 <__vector_16>:
	}
}

ISR(ADC_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
	output = ADCL;
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
 2e0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	output |= ADCH<<8;
 2e4:	25 b1       	in	r18, 0x05	; 5
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	32 2f       	mov	r19, r18
 2ea:	22 27       	eor	r18, r18
 2ec:	82 2b       	or	r24, r18
 2ee:	93 2b       	or	r25, r19
 2f0:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
 2f4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
}
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <main>:

int main(void)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <main+0x6>
 310:	00 d0       	rcall	.+0      	; 0x312 <main+0x8>
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;
 316:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
 31c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 31e:	81 bb       	out	0x11, r24	; 17
	sei();
 320:	78 94       	sei
	lcd_init();
 322:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_init>
	lcd_gotoxy(1,1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
	lcd_print("Converted value is equal to :");
 32e:	80 e6       	ldi	r24, 0x60	; 96
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_print>
	adc(0x40,0x03);
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <adc>
    while (1)
	{
		char str[4] = {0};
 33e:	19 82       	std	Y+1, r1	; 0x01
 340:	1a 82       	std	Y+2, r1	; 0x02
 342:	1b 82       	std	Y+3, r1	; 0x03
 344:	1c 82       	std	Y+4, r1	; 0x04
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x3e>
 34c:	00 00       	nop
		_delay_us(10);
		out(output, str);
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 358:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x1>
 35c:	0e 94 16 01 	call	0x22c	; 0x22c <out>
		lcd_gotoxy(1,2);
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
		lcd_print(str);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_print>
		ADCSRA |= (1<<ADSC);
 370:	86 b1       	in	r24, 0x06	; 6
 372:	80 64       	ori	r24, 0x40	; 64
 374:	86 b9       	out	0x06, r24	; 6
 376:	e3 cf       	rjmp	.-58     	; 0x33e <main+0x34>

00000378 <__umulhisi3>:
 378:	a2 9f       	mul	r26, r18
 37a:	b0 01       	movw	r22, r0
 37c:	b3 9f       	mul	r27, r19
 37e:	c0 01       	movw	r24, r0
 380:	a3 9f       	mul	r26, r19
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	b2 9f       	mul	r27, r18
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
